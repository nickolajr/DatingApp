@page "/fetchdata"
@using DatingApp.Data
@using System.Data.SqlClient
@using System.Data
@inject NavigationManager NavMan
@inject IJSRuntime JSRuntime
<PageTitle>test</PageTitle>

<h1>input username</h1>

<div class="form-group">
    <label for="test">Username</label>
    <input id="test" class="form-control" @bind="test" />
</div>

<div class="form-group">
    <label for="AccId">@AccId</label>  
</div>

<button class="btn btn-primary" @onclick="test1">test</button>

@code {
    string test;
    int AccId;
    private bool isLoggedIn;
    protected override async Task OnInitializedAsync()
    {
        string isLoggedInString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isLoggedIn");
        isLoggedIn = !string.IsNullOrEmpty(isLoggedInString) && bool.TryParse(isLoggedInString, out bool isLoggedInResult) && isLoggedInResult;

        if (!isLoggedIn) { NavMan.NavigateTo("/"); }
    }
    private void test1()
    {
        int accId;
        string connectionString = "Data Source=SKAB2-PC1;Initial Catalog=NonLonelySim;Integrated Security=True;TrustServerCertificate=True;";
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            using (SqlCommand cmd = new SqlCommand())
            {
                
                cmd.Connection = connection;                
                SqlCommand sql_cmnd = new SqlCommand("GetProfileId", connection);
                sql_cmnd.CommandType = CommandType.StoredProcedure;

                sql_cmnd.Parameters.AddWithValue("@UserName", test);
               
                
                
                var resultId =int.Parse(sql_cmnd.ExecuteScalar().ToString());

                if (resultId != null)
                {
                    accId = Convert.ToInt32(resultId);
                    AccId = accId;
                }
            }

            connection.Close();
        }
    }
}
